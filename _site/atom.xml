<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>ηї☂їᾔ</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2019-07-14T04:06:09-04:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Preparation Schedule</title>
   <link href="http://localhost:4000/2019/04/12/CollectionClass/"/>
   <updated>2019-04-12T09:52:00-04:00</updated>
   <id>http://localhost:4000/2019/04/12/CollectionClass</id>
   <content type="html">&lt;h1 id=&quot;topics&quot;&gt;Topics&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>Java Interview Questions</title>
   <link href="http://localhost:4000/2018/01/30/JavaInterviewQuestions/"/>
   <updated>2018-01-30T19:20:00-05:00</updated>
   <id>http://localhost:4000/2018/01/30/JavaInterviewQuestions</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;OOPS ()
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt; (Accessors and Mutators)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; (crisply defined conceptual boundaries, relative to the perspective of the viewer — G. Booch)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;
   —&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inheritance
    &lt;ul&gt;
      &lt;li&gt;Overloading vs overriding&lt;/li&gt;
      &lt;li&gt;multiple inheritance&lt;/li&gt;
      &lt;li&gt;method hiding&lt;/li&gt;
      &lt;li&gt;can static be inherited.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Abstraction
    &lt;ul&gt;
      &lt;li&gt;Interface
        &lt;ul&gt;
          &lt;li&gt;variables in interface&lt;/li&gt;
          &lt;li&gt;default interface&lt;/li&gt;
          &lt;li&gt;100% Abstraction&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Abstraction instantiation?&lt;/li&gt;
      &lt;li&gt;Use Abstraction when there is some relation&lt;/li&gt;
      &lt;li&gt;Use Interface when there is no relation
  +&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Polymorphism
    &lt;ul&gt;
      &lt;li&gt;Runtime Ploymorphism vs compile time polymorphism&lt;/li&gt;
      &lt;li&gt;Polymorphism as a way to have multiple inheritance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Thread
    &lt;ul&gt;
      &lt;li&gt;Ways to implement a Thread&lt;/li&gt;
      &lt;li&gt;Concurrency package&lt;/li&gt;
      &lt;li&gt;Volatile&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Collections
    &lt;ul&gt;
      &lt;li&gt;List
        &lt;ul&gt;
          &lt;li&gt;ArrayList&lt;/li&gt;
          &lt;li&gt;LinkedList
  *&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Difference between Final, Finally, Finalize&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;final
    &lt;ul&gt;
      &lt;li&gt;constant –&amp;gt; modifier (can’t be changed once declared)&lt;/li&gt;
      &lt;li&gt;a method –&amp;gt; no over riding in child class&lt;/li&gt;
      &lt;li&gt;a class –&amp;gt; no extend (inheritance), no child class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;finally (Associated with try catch block)
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;try {
  keep risky code
} catch (Exception e) {
  Exception Handling Code
} finally {
  Clean up code
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;finalize() : Method in Object Class
    &lt;ul&gt;
      &lt;li&gt;Always invoked by Garbage Collector just before destroying the object&lt;/li&gt;
      &lt;li&gt;to perform cleanup activities (like database connection close, socket close)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;finally cleanup activities for try catch
 finalize() cleanup activities related to objects.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;string-stringbuffer-and-stringbuilder&quot;&gt;String, StringBuffer and StringBuilder&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt; objects are immutable (every equality with string object creates a new object)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Immutable Object&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// When we use double quotes to create a string, it first looks for the string with the same value in the String Pool. If found it just returns the reference.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  It does so for conserving memory FLYWAY DESIGN PATTERN.&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* String s4 and s5 are two different String objecs lying in the &quot;Heap&quot; */&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;concate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Chaurasia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Eligible for GC as not referenced&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Nitin&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//2 strings are created (Nitin and Nitin Chaurasia). NC not reference&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;StringBuffer&lt;/strong&gt; objects are mutable
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Chaurasia&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//nitin chaurasia&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;StringBuffer (since java 1.0) is Synchronized, thus thread safe, thus low performance (only one thread operates on the object at a time, others has to wait)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;StringBuilder&lt;/strong&gt; (from 1.5)
    &lt;ul&gt;
      &lt;li&gt;same as StringBuffer (constructors and methods) except…&lt;/li&gt;
      &lt;li&gt;non-synchronized, thus no thread safety, thus Relatively high performance.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;String : fixed content (wont change frequently)&lt;/li&gt;
  &lt;li&gt;StringBuffer : content not fixed and thread safety is required.&lt;/li&gt;
  &lt;li&gt;StringBuilder : content not fixed and thread safety is NOT required.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;difference-between--and-equals&quot;&gt;Difference Between == and .equals&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;== reference comparison (address comparison)&lt;/li&gt;
  &lt;li&gt;.equals() is used for content comparison (in general). Can be overridden to comp. ref. if needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all Wrapper Classes, String Classes and Collection Classes,  .equals() is overridden for &lt;em&gt;content comparison&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;modifiers-in-java&quot;&gt;Modifiers in java&lt;/h3&gt;

&lt;p&gt;They can be broken into two groups:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Access control modifiers ( public, private, protected, default)&lt;/li&gt;
  &lt;li&gt;Non-access modifiers (final, abstract, static, synchronized, strictfp, transient, native, volatile)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Modifier&lt;/th&gt;
      &lt;th&gt;Class&lt;/th&gt;
      &lt;th&gt;Package&lt;/th&gt;
      &lt;th&gt;Subclass&lt;/th&gt;
      &lt;th&gt;World&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;protected&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no modifier&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;MODIFIER&lt;/th&gt;
      &lt;th&gt;DESCRIPTION&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;Visible to the world&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;Visible to the class&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;protected&lt;/td&gt;
      &lt;td&gt;Visible to the package and all subclasses&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;static&lt;/td&gt;
      &lt;td&gt;Used for creating class methods and variables&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;final&lt;/td&gt;
      &lt;td&gt;Used for finalizing implementations of classes, variables, and methods&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;abstract&lt;/td&gt;
      &lt;td&gt;Used for creating abstract methods and classes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;synchronized&lt;/td&gt;
      &lt;td&gt;Used in threads and locks the method or variable so it can only be used by one thread at a time&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;volatile&lt;/td&gt;
      &lt;td&gt;Used in threads and keeps the variable in main memory rather than caching it locally in each thread static&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Anything can be declared inside anything!!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Access Specifiers (public, private, protected and &lt;default&gt;) vs Access Modifiers&lt;/default&gt;&lt;/li&gt;
  &lt;li&gt;Old language constructs… In java there is no terminology. All (12) are considered and modifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;interface-vs-abstract-vs-concrete-class&quot;&gt;Interface vs Abstract vs Concrete class&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Interface (100% abstraction): No idea of implementation until java 7, just requirement specification, eg. Servlet
    &lt;ul&gt;
      &lt;li&gt;All methods must be public abstract (until Java 7)&lt;/li&gt;
      &lt;li&gt;Java 8 introduced default and static methods to add functionality eg. stream() functionality in Collections which is a default method in Collection Interface&lt;/li&gt;
      &lt;li&gt;In Java 9, private methods are introdced for code reusability.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Abstract Classes has partial implementation, concrete methods can be written&lt;/li&gt;
  &lt;li&gt;Concrete Class : Ready to use service&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;systemoutprintln&quot;&gt;System.out.println()&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;MySystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Compare it to&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nitin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;System is a Class&lt;/li&gt;
  &lt;li&gt;out is a static variable of type PrintStream in System class&lt;/li&gt;
  &lt;li&gt;println() is a method present in PrintStream.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;psvm&quot;&gt;PSVM&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Main method name can be set to a desired name by configuring JVM [JVM Customization]
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JVM {
public static void nitin(String[] a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;public : to be called by JVM from anywhere&lt;/li&gt;
  &lt;li&gt;static : even without existing Object, JVM can call the main method. Also main method is not related to any object.&lt;/li&gt;
  &lt;li&gt;void : no return to JVM.&lt;/li&gt;
  &lt;li&gt;main : configured JVM&lt;/li&gt;
  &lt;li&gt;String[] args : command line argument.&lt;/li&gt;
  &lt;li&gt;overloading is possible (PSVM (int b)), but JVM will only call string args method (method hiding)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inheritance is also applicable. the JVM first search main in child class or else it will execute the main method from the parent class.&lt;/p&gt;

&lt;p&gt;If both Parent and child methods are same and “static”, this is &lt;strong&gt;method hiding… not overriding&lt;/strong&gt; (only child class method is executed).&lt;/p&gt;

&lt;p&gt;Appears that overriding is applicable, but because of the static nature, its method hiding.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Inheritance and overloading is applicable&lt;/li&gt;
  &lt;li&gt;overriding is not, instead method hiding.&lt;/li&gt;
  &lt;li&gt;Java 1.7 enhancements - earlier “NoSuchMethodError : main”, now a more meaningful error&lt;/li&gt;
  &lt;li&gt;main method is mendatory, even though class has static block. Before, static block will be executed (and if System.exit(0), the program will terminate as well), and then NoSuchMethodError will be flashed.&lt;/li&gt;
  &lt;li&gt;if both static block followed by main method is present, then everything works as normal in both cases&lt;/li&gt;
  &lt;li&gt;Thus without even writing main, until Java 1.6, something can be printed on the console. from 1.7 onwards, main in compulsory.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;overloading-vs-overriding&quot;&gt;Overloading VS Overriding&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Overloading (Compile time polymorphism, static polymorphism, early binding.)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;methods same name but different argument.&lt;/li&gt;
  &lt;li&gt;Method resolution is done by compiler based on reference type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In overloading check only method name (same) and argument type (different, at least order). &lt;strong&gt;&lt;em&gt;Return types, access modifiers are not required&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Overriding (Runtime polymorphism, dynamic polymorphism, late binding)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When child class definition is different than parent class (eg: marriage() method in child vs parent)&lt;/li&gt;
  &lt;li&gt;Method resolution is done by JVM based on runtime object&lt;/li&gt;
  &lt;li&gt;co-varient return types are allowed (return can be same as Parent’s method, after Java 1.5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In overriding: EVERYTHING should be same.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Polymorphism call&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;Parent p = new Child();
// p can invoke only parents methods
// polymorphism call - use parent reference to hold any child class object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Non polymorphic call&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;Child c = new Child();
// c can invoke both parent and child methods
// can hold only child type of object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ADD IMAGE&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;control-flow-in-try-catch-finally-block&quot;&gt;Control Flow in try-catch-finally block&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;(after jumping from try in between multiple statements, rest of statements of try wont be executed. Thus keep the length of try block as small as possible)&lt;/li&gt;
  &lt;li&gt;there are chances of exception in catch or finally block as well, and it will then be an abnormal termination.&lt;/li&gt;
  &lt;li&gt;if no exception, try and finally will execute&lt;/li&gt;
  &lt;li&gt;if abnormal termination due to exception in try or catch block, then also finally will execute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Finally will always execute&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;checked-vs-unchecked-exception&quot;&gt;Checked vs Unchecked Exception&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Throwable(Class)
|
|---Exception
|      |
|      |----Runtime Exception
|      |		|
|	   |		|----Arithmatic Exception
|	   |		|----NullPointer Exception
|	   |		|----ClassCast Exception
|	   |		|----ArrayIndexOutOfBounds Exception
|	   |		|----.... etc.				
|	   |
|      |----IOException
|      |		|
|	   |		|----FileNotFound Exception
|	   |		|----EOF Exception
|	   |
|      |----Interrupted Exception
|      
|      
|----Error
|      |
|      |----VMError
|      |		|
|	   |		|----StackOverFlow Error
|	   |		|----OutOfMemory Error
|	   |		|----ClassCast Exception
|      |
|      |----Linkage Error
|      |		|
|	   |		|----Verify Error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Checked Exception : (Checked by Complier)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Checked by compiler for smooth execution of the program at runtime
(Menmonics : HallTicketMissingException, PenNotWorkingException, FileNotFoundException)&lt;/li&gt;
  &lt;li&gt;if programmer doesn’t handle checked exceptions, compile time error. in other words, programmer has to handle the exception.&lt;/li&gt;
  &lt;li&gt;Must be caught (try catch) or thrown (throws clause in the method definition)&lt;/li&gt;
  &lt;li&gt;Throwable -&amp;gt; Exception -&amp;gt;)Runtime exception and its child classes, (Throwable-&amp;gt;)Error and its child classes are unchecked exceptions. Rest all are checked.&lt;/li&gt;
  &lt;li&gt;Further classified as fully checked or partially checked&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unchecked Exception&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;not checked by Compiler (arithmatic, nullpointer)&lt;/li&gt;
  &lt;li&gt;Compiler won’t check if the programmer handled the exception.&lt;/li&gt;
  &lt;li&gt;(Runtime Exception class is unckecked, rest all checked like IOException in Exception class)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Both occur at runtime.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Runtime Exception and its child classes, Error and its child classes are unchecked. Except this, all are checked exceptions.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;partially-checked-vs-fully-checked-exception&quot;&gt;Partially Checked vs Fully Checked Exception&lt;/h3&gt;
&lt;p&gt;FullyChecked exception&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;iff all the child classes are checked&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PrtiallyChecked exception&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;if some of child classes are Unchecked while some are checked. Thus Exception Class is partially checked as Runtime Exception class is Unchecked and IOException class is cheked&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only partially checked exception in Java are&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Exception&lt;/li&gt;
  &lt;li&gt;Throwable&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;error-vs-exception&quot;&gt;Error vs Exception&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Throwable (Class) has two child classes
    &lt;ul&gt;
      &lt;li&gt;Exception
        &lt;ul&gt;
          &lt;li&gt;Recoverable (file not found, catch {use local file and continue..})&lt;/li&gt;
          &lt;li&gt;Programming faults&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Error (Unchecked)
        &lt;ul&gt;
          &lt;li&gt;Non recoverable&lt;/li&gt;
          &lt;li&gt;lack of system resources (out of memory etc)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;var-arg-methods&quot;&gt;Var-Arg Methods&lt;/h3&gt;
&lt;p&gt;Declare a method with variable number of Arguments&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Since V1.5&lt;/li&gt;
  &lt;li&gt;method (int… x) &amp;amp; method(int x…) - ONLY TWO WAYS OF DECLARATION&lt;/li&gt;
  &lt;li&gt;Only one Var-Arg parameter is allowed, also it should be last - m(String s, int… x)&lt;/li&gt;
  &lt;li&gt;internally its implemented by 1D Array&lt;/li&gt;
  &lt;li&gt;var-arg will get least priority. similar to default in Switch&lt;/li&gt;
  &lt;li&gt;USE : instead of writing multiple similar methods od same type, var args can be used. eg : List.of() has 10 methods and a var args to accomodate all choices. var-arg is an expensive operation internally&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;generics-j-15-onwards&quot;&gt;Generics (J 1.5 onwards)&lt;/h3&gt;

&lt;p&gt;Main Purpose of Generics is to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide Type-Safety&lt;/li&gt;
  &lt;li&gt;and Resolve Type Casting Problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Type Safety :&lt;/p&gt;

&lt;p&gt;Arrays are type safe by default, eg. we cannot insert non String objects in a String array.  While in ArrayList, without generics, we can insert an int as well as string, as any object can be inserted. Thus collections are not type safe by default.&lt;/p&gt;

&lt;p&gt;Type Casting :&lt;/p&gt;

&lt;p&gt;While retreiving the data from an Arraylist, if nor generic, type casting is necessasary as it returns an object&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Shortcut to place jar file in classpath&lt;/p&gt;

&lt;p&gt;Put the jar file in ext folder&lt;/p&gt;

&lt;p&gt;jdk -&amp;gt; jre -&amp;gt; lib -&amp;gt;ext -&amp;gt; *.jar&lt;/p&gt;

&lt;p&gt;to create a jar file&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; jar -cvf myJar.jar Test.class Test2.class
 jar -cvf myJar.jar *.*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to unzip jar&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jar -xvf myJar.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to display contents&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jar -tvf myJar.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;oops-concept&quot;&gt;OOPS Concept&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Security Related&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Data Hiding&lt;/li&gt;
  &lt;li&gt;Abstraction&lt;/li&gt;
  &lt;li&gt;Encapsulation&lt;/li&gt;
  &lt;li&gt;Tightly Encapsulated Class
&lt;strong&gt;Code Reusability&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;IS-A Relationship (Inheritance)&lt;/li&gt;
  &lt;li&gt;HAS-A Relationship
&lt;strong&gt;sdsd&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Method Signature&lt;/li&gt;
  &lt;li&gt;Overloading&lt;/li&gt;
  &lt;li&gt;Overriding&lt;/li&gt;
  &lt;li&gt;Static Control Flow&lt;/li&gt;
  &lt;li&gt;Instance Control Flow&lt;/li&gt;
  &lt;li&gt;Constructors
&lt;strong&gt;Advanced OOP Features&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Coupling&lt;/li&gt;
  &lt;li&gt;Cohesion&lt;/li&gt;
  &lt;li&gt;Type Casting&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-oops-principal-in-java&quot;&gt;4 OOPS principal in Java&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt; - encapsulation means data hiding. (By using private keyword)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; - Abstraction means hiding the implementation (Using Interface)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt; - Inheritance is a process where child class acquires the properties of super class, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt; - Property of an object to take on different forms&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Compile time polymorphism&lt;/strong&gt; - using &lt;del&gt;Method overloading&lt;/del&gt; by implements&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Runtime polymorphism&lt;/strong&gt; - Method overriding - by  extends.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;Data Hiding : By declaring data member or variable private,
    &lt;ul&gt;
      &lt;li&gt;internal data cannot be accessed by outside. By declaring data member or variable private, we achieve Data hiding.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Abstraction : By using Interfaces and Abstract class
    &lt;ul&gt;
      &lt;li&gt;Hiding internal implementation, eg ATM GUI Screen&lt;/li&gt;
      &lt;li&gt;Advantage :
        &lt;ul&gt;
          &lt;li&gt;Security as internal implementation is not exposed&lt;/li&gt;
          &lt;li&gt;without affecting outside, internal implementation can be changed/optimized. Thus enhancement becomes easy&lt;/li&gt;
          &lt;li&gt;Improved maintainability&lt;/li&gt;
          &lt;li&gt;Provides easy to use the system&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Partial Abstraction : Abstract Class&lt;/li&gt;
      &lt;li&gt;Full Abstraction : Interface&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Encapsulation : Process of Binding data members and their corrosponding behaviour such that
    &lt;ul&gt;
      &lt;li&gt;the methods operate on the data as opposed to the users of the class accessing the fields&lt;/li&gt;
      &lt;li&gt;Getters and Setters (Accessors and Modifiers)&lt;/li&gt;
      &lt;li&gt;Implemented with private instance fields which has public methods to access the fields directly&lt;/li&gt;
      &lt;li&gt;Encapsulation = Data Hiding + Abstraction&lt;/li&gt;
      &lt;li&gt;Adv : security&lt;/li&gt;
      &lt;li&gt;Disadv : increases code length and slows down execution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tightly encapsulated class : iff all variabe are private
Complete Encapsulation : By declaring all members private&lt;/p&gt;

&lt;p&gt;Partial Encapsulation : By declaring public or protected&lt;/p&gt;

&lt;p&gt;If a parent class is not tightly encapsulated then no chil class is tightly encapsulated&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;IS-A Relationship (Inheritance)
    &lt;ul&gt;
      &lt;li&gt;implemented my “extends” keyword.&lt;/li&gt;
      &lt;li&gt;Adv : Code reusability&lt;/li&gt;
      &lt;li&gt;Entire java API is implemented based on inheritance.&lt;/li&gt;
      &lt;li&gt;Every java class extends from Object class which has most common and basic methods required for all java classes. Hence we can say “Object ” class is root class of all java methods.&lt;/li&gt;
      &lt;li&gt;Dynamic polymorphism in Java is achieved by method overriding&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;As the method to call is determined at runtime, this is called dynamic binding or late binding.&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Parent has m1(), Child extends Parent and has m2()*/&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Valid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Complie time error: Cannot find symbol&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//valid, as child inherits from parent&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// valid as child provides implementation m2&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Polymorphic Call&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// valid as pc is of type Parent&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// invalid, CE : Cannot find symbol&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Parent class reference can hold child class object, BUT only parent class specific methods are available, Child class methods are not available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Multiple Inheritance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Java class cannot extend more than one class at a time. Thus Java doesnot support multiple inheritance. Only multilevel inheritance (Object -&amp;gt; Throwable -&amp;gt; RunTimeException) is allowed. Multiple Interfaces can be implemeted as the implemetation is explicitly provided by the implementing class&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Multiple inheritance and The Diamond Problem&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The diamond problem is an &lt;strong&gt;ambiguity&lt;/strong&gt; that arises when two classes B and C inherit from A, and class D inherits from both B and C. If a method in D calls a method defined in A (and does not override the method), and B and C have overridden that method differently, then from which class does it inherit: B, or C?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Cyclic Inheritance is not allowed&lt;/strong&gt;
A extends B and B extends A not allowed&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HAS-A Relationship (more commonly used than IS-A)
    &lt;ul&gt;
      &lt;li&gt;aka Composition or Aggregation&lt;/li&gt;
      &lt;li&gt;No specific keyword, but mostly “new” is used (for instance method)&lt;/li&gt;
      &lt;li&gt;Advantage : Code reuability&lt;/li&gt;
      &lt;li&gt;Disadv : code dependency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Engine related functionality&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The Car HAS-A engine reference&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Composition - Strong Association&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Without existence of container object, if there is no existence of contained objects then container and contained objects are said to be &lt;strong&gt;strongly associated&lt;/strong&gt; and this strong association is known as composition.&lt;/p&gt;

  &lt;p&gt;University is Container Object
Department : Contained Object
Without University, no department exist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Aggregation - Weak Association&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Without existence of container object, if there is a chance of existence of contained objects then container and contained objects are said to be &lt;strong&gt;loosely/weakly associated&lt;/strong&gt; and this loose association is known as aggregation.&lt;/p&gt;

  &lt;p&gt;A  “department” has several “professors”. Without existence of “departments” there is good chance for the “professors” to exist. Hence “professors” and “department” are loosely associated and this loose association is known as Aggregation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IS-A vs HAS-A&lt;/p&gt;

&lt;p&gt;For total functionality of a class, IS-A Relationship (Person Class functionality id required in total to the Student Class)&lt;/p&gt;

&lt;p&gt;For Part of the functionality of a class is expected, use HAS-A relationship. If Test class has 100 methods and only few are needed in Demo class, create an object of test and use t.m1(), t.m2() etc.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Method signature in Java
Method signature = Name + Argument (type and order)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Return type is not part of method signature in java&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Overloading (Same method name, different Argument)
    &lt;ul&gt;
      &lt;li&gt;method resolution takes care by compiler based of reference type (of the argument)&lt;/li&gt;
      &lt;li&gt;Thus method overloading is also know as&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;Compile time Polymorphism&lt;/li&gt;
      &lt;li&gt;Static Binding&lt;/li&gt;
      &lt;li&gt;Early Binding
    - Reference type plays very important role during complie time
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Monkey Extends Animal&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// overloaded method with argument type Animal is called as during complie time Reference type is available, not run time object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- **Automatic Promotion in overloading** - if argument reference type is not matched, compiler automatically promotes the type before throwing error. byte-&amp;gt;short-&amp;gt;int-&amp;gt;float-&amp;gt;double
- *uses type information (class in Java) for binding, binding -&amp;gt; relating methods to methods calls*
- *private, static, final, static variables } methods, not participation in polymorphism*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Binding : Relating a method call to a method&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;overriding&quot;&gt;Overriding&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Same signature, child and parent but different implementation&lt;/li&gt;
      &lt;li&gt;Method resolution takes care by JVM based on runtime Object and hence  it is also called Runtime Polymorphism, Dynamic Binding or Late Binding.&lt;/li&gt;
      &lt;li&gt;Dynamic Binding : all instance methods, Virtual methods are bounded during runtime object&lt;/li&gt;
      &lt;li&gt;No concept of compile time polymorphism.&lt;/li&gt;
      &lt;li&gt;Dynamic binding makes polymorphism possible. Compiler is not able to resolve the call. JVM binds based on runtime Object&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Child extends from Parent and overrides method m1()&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the compiler happily complies as m1 is present is Parent. During run time, since m1() of child is overridden, the m1() of child class is invoked.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rules for Overriding&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In override, return type must be same until 1.4. From v1.5, we can return “Covariant Return types”&lt;/li&gt;
  &lt;li&gt;Java allow overriding by changing the return type, but only Covariant return type are allowed.&lt;/li&gt;
  &lt;li&gt;private and final cannot be overridden&lt;/li&gt;
  &lt;li&gt;static methods cannot be overridden BUT no contribution in Polymorphism (no dynamic binding).&lt;/li&gt;
  &lt;li&gt;static methods are class methods access to them is always resolved during compile time only using the compile time type information.&lt;/li&gt;
  &lt;li&gt;Accessing static method using object references is a bad practice (we must access static variable using Class Name) and just an extra liberty given by the java designers&lt;/li&gt;
  &lt;li&gt;Also static method in subclass is hidden (if extended) by static method of parent class&lt;/li&gt;
  &lt;li&gt;Cannot reduce visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example -
return type of SuperClass’s myMethod is  SuperClass but
SubClass’s myMethod returns  SubClass.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Coupling&lt;/p&gt;

    &lt;p&gt;The degree of dependency between the components is called Coupling. If dependency is more then it is called Tightly Coupled and if dependency is less, loosely coupled&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Collection Class</title>
   <link href="http://localhost:4000/2018/01/23/CollectionClass/"/>
   <updated>2018-01-23T19:32:00-05:00</updated>
   <id>http://localhost:4000/2018/01/23/CollectionClass</id>
   <content type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://localhost:4000/media/Collections.docx&quot;&gt;Collection API&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://localhost:4000/media/Collections.pdf&quot;&gt;Collection API - PDF&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Collection(I)
|
|---List
|      |
|      |----ArrayList
|      |----LinkedList
|      |----Vector---Stack
|      
|      
|----Set
|      |
|      |----HashSet----LinkedHashSet
|      |----TreeSet
|      
|      
|----Queue
|      |
|      |----PriorityQueue(I)
|      |----BlockingQueue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.bgsu.edu/nitinc/2017/02/11/collection/&quot; target=&quot;_blank&quot;&gt;Collection Interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Collection Interface:
&lt;img src=&quot;https://blogs.bgsu.edu/nitinc/files/2015/01/Screen-Shot-2015-01-24-at-4.15.39-PM.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Maps Patterns</title>
   <link href="http://localhost:4000/2017/02/01/maps/"/>
   <updated>2017-02-01T19:20:00-05:00</updated>
   <id>http://localhost:4000/2017/02/01/maps</id>
   <content type="html">&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//get value from the key&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//get all the keys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;map-iterator-using-set&quot;&gt;Map Iterator using Set&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Iterator on all the keys&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;map-iterator-using-entryset&quot;&gt;Map Iterator using EntrySet&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;removing-the-element&quot;&gt;Removing the element&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tempKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Concurrent Modification Exception&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// DO NOT USE THIS&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//ALWAYS REMOVE USING ITERATOR&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Count the number of occurances&lt;/li&gt;
&lt;/ol&gt;
&lt;noscript&gt;&lt;pre&gt;Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;String, Integer&amp;gt;();

// Putting the contents of a list into HaspMap, with its number of occurances
for (int i = 0; i &amp;lt; list.size()-1; i++) {
    //If the word is not there inside, put the key with value as 1
    if (!map.containsKey(list.get(i))) {
        map.put(list.get(i), 1);
    } else {
        int count = map.get(list.get(i));
        map.put(list.get(i), count + 1);//increase the count by one
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/bba1ebd048609bc3336bcf738c2a9037.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Arrays Patterns</title>
   <link href="http://localhost:4000/2016/11/25/Arrays-Patterns/"/>
   <updated>2016-11-25T15:20:00-05:00</updated>
   <id>http://localhost:4000/2016/11/25/Arrays Patterns</id>
   <content type="html">&lt;h2 id=&quot;arrays-patterns&quot;&gt;Arrays Patterns&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Two Pointer Technique
   1. One Fast runner the other one runs slow.
   2. One begins from start, other from the end. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;noscript&gt;&lt;pre&gt;public void revereseString2Pointes(char[] str){
 //check if the string is null
  if(str.length == 0) return;
  
  int start = 0, end = str.length - 1;
  
  //Use while for code clarity
  while (i &amp;lt; j){
    swap (str, i, j);
    i++;
    j--;
  }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/8a3eb81f7ccf93b013a2fe8455a04703.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Upgrading the Macbook Pro - Model A1278</title>
   <link href="http://localhost:4000/2016/07/31/Mac-Upgrade/"/>
   <updated>2016-07-31T11:04:00-04:00</updated>
   <id>http://localhost:4000/2016/07/31/Mac-Upgrade</id>
   <content type="html">&lt;h2 id=&quot;upgrading-the-macbook-pro&quot;&gt;Upgrading the Macbook Pro&lt;/h2&gt;
&lt;p&gt;I was planning to buy a new Macbook as the one which was gifted by one of my best friends became a really slow.&lt;/p&gt;

&lt;p&gt;Ijust checked a few videos on Youtube and found out that just by replaching and changing my HDD to SSD, it will boost up the performance.&lt;/p&gt;

&lt;p&gt;Thus I ordered everything online&lt;/p&gt;

&lt;p&gt;Opening up the Macbook Pro flap needs special tools, so i ordered a universal tool kit to open all the screws of macbook, iphone and other android phones.&lt;/p&gt;

&lt;p&gt;I upgraded&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;RAM from the original 4GB to 16 GB - Crucial 16GB Kit (8GBx2) DDR3L 1600 SODIMM Memory for Mac System(CT2K8G3S160BM )- (Crucible RAM - https://www.amazon.com/gp/product/B008LTBJFW/ref=od_aui_detailpages01?ie=UTF8&amp;amp;psc=1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replaced the original HDD with Samsung SSD - Samsung 850 EVO - 500GB - 2.5-Inch SATA III Internal SSD (MZ-75E500B/AM) (https://www.amazon.com/gp/product/B00OBRE5UE/ref=od_aui_detailpages01?ie=UTF8&amp;amp;psc=1)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The hard disk that came out cam be used as an external drive using an enclosure. The best one that i liked is
HandAcc 2.5 Inch USB 3.0 Hard Drive External Enclosure Case For 9.5mm &amp;amp; 7mm 2.5” SATA HDD and SSD, Support UASP, Tool-free, Silver
(https://www.amazon.com/gp/product/B015P98F8E/ref=od_aui_detailpages01?ie=UTF8&amp;amp;psc=1)&lt;/p&gt;

&lt;p&gt;Before upgrading the SSD, the clone needs to be created from the original HDD. This clone on the new SSD will help use the SSD directly. I have used Bombich Software’s Carbon Copy Cleaner. The free 30 day trial was enough for me to clone my HDD. It took nearly 6 hours to clone 460GB Data.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Revisions</title>
   <link href="http://localhost:4000/2016/04/15/sql-revisions/"/>
   <updated>2016-04-15T07:45:00-04:00</updated>
   <id>http://localhost:4000/2016/04/15/sql-revisions</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/SQL_Exercises/Employee_management&quot; target=&quot;\_blank&quot;&gt;Exercise 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/SQL_Exercises&quot; target=&quot;\_blank&quot;&gt;Exercise 2&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;sql&quot;&gt;SQL&lt;/h5&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; Retrieve a particular empid.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-check&quot;&gt;&lt;/i&gt;
 Use &lt;strong&gt;where&lt;/strong&gt; clause&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; How many types to delete the data&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;truncate (deletes data but not table): TRUNCATE removes all rows from a table&lt;/li&gt;
    &lt;li&gt;The DELETE command is used to remove rows from a table
      &lt;ul&gt;
        &lt;li&gt;DELETE FROM emp WHERE job = ‘CLERK’;&lt;/li&gt;
        &lt;li&gt;you need to COMMIT or ROLLBACK the transaction to make the change permanent&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;drop table/database : deletes a table/database
      &lt;ul&gt;
        &lt;li&gt;All the tables’ rows, indexes and privileges will also be removed&lt;/li&gt;
        &lt;li&gt;The operation cannot be rolled back.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Find count departments id where more than 5 employees.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;# employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dname&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;did&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dname&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SET Theory&lt;/strong&gt;: Inline-view, TOP-N Analysis&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- Select 11th heighest salary.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SALARY&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMPLOYEE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rownum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MINUS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SALARY&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMPLOYEE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rownum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Name all the depts with more than 5 employees.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dname&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;did&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dname&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;joins&quot;&gt;JOINS&lt;/h2&gt;

&lt;p&gt;JOINS : To combine rows from two or more tables, based on common fields between them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INNER JOIN&lt;/strong&gt;: (Common Type) – EQUI JOIN, NON-EQUI JOIN, NATURAL JOIN, SELF JOIN&lt;/p&gt;

&lt;p&gt;Return rows as long as there one match in both tables&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OUTER JOIN&lt;/strong&gt; (Smarter than inner)– LEFT, RIGHT &amp;amp; FULL&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OUTER is result of INNER &amp;amp; some additional data from one of the tables or from both the tables&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LEFT OUTER JOIN&lt;/strong&gt;: Return all rows from the left table, even if there are
 no matches in the right table and all matching rows from right&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RIGHT OUTER JOIN&lt;/strong&gt;: Return all rows from the right table and matching rows from left&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FULL OUTER JOIN&lt;/strong&gt;: Return rows when there is a match in one of the tables&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/media/Joins.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The USING clause&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The USING clause is used if several columns share the same name but you don’t want to join using all of these common columns. The columns listed in the USING clause can’t have any qualifiers in the statement, including the WHERE clause.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ON clause&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ON clause is used to join tables where the column names don’t match in both tables. The join conditions are removed from the filter conditions in the WHERE clause.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;-- OUTER JOIN is smarter than INNER
-- Customer – cust_id - 1,2,3
-- Sales – cust_id - 3, 6

Select * from customer c, sales s where c.cust_id = s.cust_id

Select * from customer c LEFT OUTER JOIN sales s ON c.cust_id = s.sales_id
Select * from customer c RIGHT OUTER JOIN sales s ON c.cust_id = s.sales_id
Select * from customer c FULL OUTER JOIN sales s ON c.cust_id = s.sales_id
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- INNER&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- SELF JOIN only one table is involved in join&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KYC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KYC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kyc_ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kyc_ind&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Budget&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employees&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Departments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Department&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Budget&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employees&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Departments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Department&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SELF JOIN&lt;/strong&gt; – only one table is involved in join &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' works for '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ename&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;&quot;Employees and their Managers&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OR can be written as&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' works for '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ename&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;&quot;Employees and their Managers&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; explain plan, performance tuning.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The EXPLAIN PLAN statement displays execution plans chosen by the Oracle optimizer for SELECT, UPDATE, INSERT, and DELETE statements. A statement’s execution plan is the sequence of operations Oracle performs to run the statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; syntax for finding indexes in tuning.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Indexes are special lookup tables that the database search engine can use to
speed up data retrieval. An index is a pointer to data in a
table.&lt;/p&gt;
  &lt;pre&gt;
CREATE UNIQUE INDEX index_name
ON table_name (column_name)
&lt;/pre&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; full table scan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; index advantegs of indexes in sql tuning? What is the syntax of doing that.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Indexes are a performance drag when the time comes to modify records.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Multiple Conditions : AND &lt;br /&gt;&lt;/p&gt;
  &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateofjoining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1990&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;&lt;br /&gt;Range Selection - BETWEEN&lt;/p&gt;
  &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;&lt;br /&gt;Exact List Matching&lt;/p&gt;
  &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employeeID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-question&quot;&gt;&lt;/i&gt; Full table scan&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A full table scan occurs when an index is either not used or there is no index on the table(s)&lt;/li&gt;
  &lt;li&gt;Full table scans should be avoided when reading large tables.For example, a full table scan is performed when a table that does not have an index is read&lt;/li&gt;
  &lt;li&gt;FTS will be performed even though an index is present on that table.
    &lt;ul&gt;
      &lt;li&gt;If a query does have a WHERE clause, but none of the columns in that WHERE clause match.&lt;/li&gt;
      &lt;li&gt;when WHERE clause prevents the use of an index like below.&lt;/li&gt;
      &lt;li&gt;If the NOT EQUAL (the “&amp;lt;&amp;gt;“) operator is used.&lt;/li&gt;
      &lt;li&gt;If the NOT operator is used.&lt;/li&gt;
      &lt;li&gt;If the wildcard operator is used in the first position of a comparison string. An example is “WHERE NAME LIKE ‘%INTERVIEW%’”.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux Files</title>
   <link href="http://localhost:4000/2016/04/14/linux-files/"/>
   <updated>2016-04-14T16:11:00-04:00</updated>
   <id>http://localhost:4000/2016/04/14/linux-files</id>
   <content type="html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Directory&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;Root&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/boot&lt;/td&gt;
      &lt;td&gt;For Linux kernel and boot loader files.The kernel is a file called &lt;strong&gt;vmlinuz&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/etc&lt;/td&gt;
      &lt;td&gt;Configuration files (All &lt;strong&gt;text files&lt;/strong&gt;).&lt;br /&gt;&lt;br /&gt; &lt;strong&gt;/etc/passwd&lt;/strong&gt; Here users are defined &amp;amp; essential information for each user is kept like username, password (&lt;strong&gt;Encrypetd &amp;amp; stored in shadow&lt;/strong&gt;), group id, userid, user id info, home directory, command shell etc… .&lt;br /&gt; Password is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/shadow&lt;/code&gt; file not in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; &lt;br /&gt; &lt;strong&gt;/etc/fstab&lt;/strong&gt; table of devices that get mounted when your system boots. defines your disk drives.&lt;br /&gt; &lt;strong&gt;/etc/hosts&lt;/strong&gt; Lists the network host names and IP addresses that are intrinsically known to the system. &lt;br /&gt; &lt;strong&gt;/etc/init.d&lt;/strong&gt; This directory contains the scripts that start various system services at boot time.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/bin &lt;br /&gt;/usr/bin&lt;/td&gt;
      &lt;td&gt;contains most of the executable programs for the system. /bin : system requires to operate, /usr/bin contains applications for the system’s users.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/sbin&lt;br /&gt; /usr/sbin&lt;/td&gt;
      &lt;td&gt;Executables for system administration by the superuser.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr&lt;/td&gt;
      &lt;td&gt;Things that support user applications &lt;br /&gt; &lt;strong&gt;/usr/share/X11&lt;/strong&gt; Support files for the X Windows system&lt;br /&gt; &lt;strong&gt;/usr/share/dict&lt;/strong&gt; Dictionaries for the spelling checker. Ckeck &lt;code class=&quot;highlighter-rouge&quot;&gt;look&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ispell&lt;/code&gt;.&lt;br /&gt;&lt;strong&gt;/usr/share/doc&lt;/strong&gt; documentation files in a variety of formats.&lt;br /&gt;&lt;strong&gt;/usr/share/man&lt;/strong&gt; Place for man pages.&lt;br /&gt; &lt;strong&gt;/usr/src&lt;/strong&gt; Source code files.(if kernel source code package is installed)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/usr/local&lt;br /&gt; /usr/local/bin&lt;/td&gt;
      &lt;td&gt;Used for the installation of software for local machine.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/var&lt;/td&gt;
      &lt;td&gt;Files that change as the system is running. &lt;br /&gt; &lt;strong&gt;/var/log&lt;/strong&gt; log files updated as the system runs. &lt;br /&gt; &lt;strong&gt;/var/spool&lt;/strong&gt; This directory is used to hold files that are queued for some process, such as mail messages and print jobs. Eg: local email is first stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/spool/mail&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/lib&lt;/td&gt;
      &lt;td&gt;shared libraries (like .dll in Windows)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/dev&lt;/td&gt;
      &lt;td&gt;Devices (as files) that are available to the system. /dev/sda (/dev/hda on older systems) is the first IDE hard drive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/proc&lt;/td&gt;
      &lt;td&gt;processes running on the system.  Many of these entries can be viewed. Eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/cpuinfo&lt;/code&gt;. This entry will tell you what the kernel thinks of your CPU.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/media &lt;br /&gt; /mnt&lt;/td&gt;
      &lt;td&gt;The /media directory is used for mount points. This process of attaching (&lt;em&gt;devices attached to the file system tree in various places&lt;/em&gt;) a device to the tree is called &lt;strong&gt;mounting&lt;/strong&gt;. For a device to be available, it must first be mounted. &lt;br /&gt;&lt;br /&gt;When your system boots, it reads a list of mounting instructions in the file /etc/fstab, which describes which device is mounted at which mount point in the directory tree. This takes care of the hard drives, but you may also have devices that are considered temporary, such as CD-ROMs and floppy disks. Since these are removable, they do not stay mounted all the time. The /media directory is used by the automatic device mounting mechanisms found in modern desktop oriented Linux distributions. &lt;br /&gt;&lt;br /&gt;On systems that require manual mounting of removable devices, the &lt;strong&gt;/mnt&lt;/strong&gt; directory provides a convenient place for &lt;strong&gt;mounting these temporary devices&lt;/strong&gt;. You will often see the directories /mnt/floppy and /mnt/cdrom. To see what devices and mount points are used, type mount.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>Test</title>
   <link href="http://localhost:4000/2016/04/14/testing/"/>
   <updated>2016-04-14T12:21:00-04:00</updated>
   <id>http://localhost:4000/2016/04/14/testing</id>
   <content type="html">&lt;h2 class=&quot;no_toc&quot; id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot; id=&quot;markdown-toc-java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux&quot; id=&quot;markdown-toc-linux&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hibernate&quot; id=&quot;markdown-toc-hibernate&quot;&gt;Hibernate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring&quot; id=&quot;markdown-toc-spring&quot;&gt;Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;java&quot;&gt;Java&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;what are the data types&lt;/li&gt;
  &lt;li&gt;String equality&lt;/li&gt;
  &lt;li&gt;GC - when does the world stops&lt;/li&gt;
  &lt;li&gt;Java heaps - memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Whiteboard&lt;/strong&gt; Find popular name in a List of names. Most frequently name in a List&lt;/p&gt;

&lt;h5 id=&quot;linux&quot;&gt;Linux&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;what is ls.
    &lt;ul&gt;
      &lt;li&gt;list all the commands&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commands to see processesps commands and jobs command
    &lt;ul&gt;
      &lt;li&gt;top&lt;/li&gt;
      &lt;li&gt;ps -ef&lt;/li&gt;
      &lt;li&gt;GUI : System monitor (GNOME, KDE System -&amp;gt; Monitor)&lt;/li&gt;
      &lt;li&gt;kill -9 to terminate.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Error in file access. (File Permission)
    &lt;ul&gt;
      &lt;li&gt;Ownership permission (ugo -&amp;gt; USER, GROUP &amp;amp; OTHER)&lt;/li&gt;
      &lt;li&gt;Viweing Permission (r=4; w=2; x=1)&lt;/li&gt;
      &lt;li&gt;eg: 700 (rwx for u, none got g,o)&lt;/li&gt;
      &lt;li&gt;chmod for changing file permission (chmod 771 file.exe)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;what is there in exe Folder.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2016/04/14/linux-files/&quot;&gt;Important Linux Files&lt;/a&gt;&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;grep : Search a pettern in File.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep ‘pattern to search’ file1 file2&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i -n ‘administrator’  file1.txt&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ignoring the case ( -i)&lt;/li&gt;
      &lt;li&gt;Displaying line Numbers  ( -n )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How can u find a pattern and how to do recursively
    &lt;ul&gt;
      &lt;li&gt;grep -r “texthere” .&lt;/li&gt;
      &lt;li&gt;Recursively search “texthere” in PWD.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Given directory hierarchy. Find a file.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find / -name 'program.c' 2&amp;gt;errors.txt&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Start searching from the root directory (i.e / directory)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-name&lt;/code&gt; : Given search text is the filename rather than any other attribute of a file&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'program.c'&lt;/code&gt; Search text that we have entered. Always enclose the filename in single quotes.. why to do this is complex.. so simply do so.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ find /mp3collection -name '*.mp3' -size -5000k&lt;/code&gt; find in /mp3collection, only those mp3 files that have a size less than 5000 Kilobytes ( &amp;lt; 5MB)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ find / -size +10000k&lt;/code&gt; search from the / directory for any file that is larger than 10000k (&amp;gt; 10MB)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how do u connect to remove server securely.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh remote_username@remote_host&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;SSH keys should be generated on the computer you wish to log in from. This is usually your local computer. Enter the following into the command line. &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;remove the file from remote server
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh username@domain.com 'rm /some/where/some_file.war'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;difference between move and copy
    &lt;ul&gt;
      &lt;li&gt;mv displaces the file, cp makes a new copy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;diff : compare the two files.
    &lt;ul&gt;
      &lt;li&gt;cmp returns first occurrence of difference&lt;/li&gt;
      &lt;li&gt;diff returns all differences&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Distributions &amp;amp; version of Linux
    &lt;ul&gt;
      &lt;li&gt;Fedora/RedHat based : Fedora 23, Cent OS&lt;/li&gt;
      &lt;li&gt;Debian Based : Ubuntu 15 LTS&lt;/li&gt;
      &lt;li&gt;Mac OS is based on a BSD code base&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What is GNOME.
    &lt;ul&gt;
      &lt;li&gt;GNOME desktop and KDE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;hibernate&quot;&gt;Hibernate&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Disadvantage of Hibernate&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
1. Not that flexible when it comes to mapping composite-ids (although you can do a lot). While this is not a fault of Hibernate as composite-ids are typically used in legacy systems, it can be a pain when attempting to map legacy tables.

2. Everything is an object. If you need only a portion of data (say, for a search), you would still have to retrieve the object. However, this is true for any ORM strategy.

3. In some cases, you will encounter the (n+1) select problem. That is, Hibernate will execute (n+1) queries for going through a list of records of size n. There are some mechanisms suggested by Hibernate that can be used to mitigate this risk.

4. Till Hibernate 3, you cannot map multiple tables to a single class. This has been fixed in Hibernate 3 using the join tag.
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Hibernate over JDBC
    &lt;ul&gt;
      &lt;li&gt;Make software database independent. Can replace any other database with this.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;spring&quot;&gt;Spring&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;What is Dependency Injection&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;IOC(Inversion Of Controller):   Giving control to the container to get instance of object is called Inversion of Control.,
    • means instead of you are creating object using new operator, let the container do that for you.

DI(Dependency Injection):  Decoupling by passing an object to a function rather than CREATING the object the circle inside the method.
Way of injecting properties to an object is called Dependency injection.

    We have three types of Dependency injection
        1)  Constructor Injection : Constructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, each representing a dependency on other class.
        2)  Setter/Getter Injection : Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.
        3)  Interface Injection
Spring support only Constructor Injection and Setter/Getter Injection.
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;what is setter injection and constructor injection&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Stacks</title>
   <link href="http://localhost:4000/2016/04/11/stacks/"/>
   <updated>2016-04-11T18:20:00-04:00</updated>
   <id>http://localhost:4000/2016/04/11/stacks</id>
   <content type="html">&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Both add and push does the same thing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// return the value and pops the top&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Return the top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;stack-using-an-arraylistarray-also-min&quot;&gt;Stack Using an ArrayList/Array (Also min)&lt;/h5&gt;

&lt;h5 id=&quot;stack-using-2-stacks-also-min&quot;&gt;Stack using 2 stacks (Also min)&lt;/h5&gt;

&lt;p&gt;#####&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Queue</title>
   <link href="http://localhost:4000/2016/04/11/queues/"/>
   <updated>2016-04-11T07:33:00-04:00</updated>
   <id>http://localhost:4000/2016/04/11/queues</id>
   <content type="html">&lt;h5 id=&quot;queue-using-an-arraylistarray&quot;&gt;Queue Using an ArrayList/Array&lt;/h5&gt;

</content>
 </entry>
 
 <entry>
   <title>Trees</title>
   <link href="http://localhost:4000/2016/04/06/trees/"/>
   <updated>2016-04-06T01:14:00-04:00</updated>
   <id>http://localhost:4000/2016/04/06/trees</id>
   <content type="html">&lt;h5 id=&quot;trees-iteration&quot;&gt;Trees Iteration&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;public int countEmpty() {
    return countEmpty(overallRoot);
}

public int countEmpty(IntTreeNode root) {
    if (root == null)
        return 1;
    int count = 0;

    //if its a child, there are two empty spots
    if (root.left == null &amp;amp;&amp;amp; root.right == null) {
        return 2;
    }

    //Else if one child is there, one sopt is there and the other spot had a subproblem
    else if (root.left == null &amp;amp;&amp;amp; root.right != null) {
        return 1 + countEmpty(root.right);
    } else if (root.left != null &amp;amp;&amp;amp; root.right == null) {
        return 1 + countEmpty(root.left);
    } else
        count = countEmpty(root.left) + countEmpty(root.right);
    return count;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/619d22e2ae458a3f174b0297019e6fd5.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Linked List</title>
   <link href="http://localhost:4000/2016/04/06/linked-list/"/>
   <updated>2016-04-06T01:14:00-04:00</updated>
   <id>http://localhost:4000/2016/04/06/linked-list</id>
   <content type="html">&lt;h3 id=&quot;linked-list&quot;&gt;Linked List&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nc&quot;&gt;LinkNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//head&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Runner stops at the last node, else runner will end up pointing null!!&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;add-in-the-list&quot;&gt;Add in the List&lt;/h4&gt;

&lt;h5 id=&quot;add-in-the-front&quot;&gt;Add in the front&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;add-at-index&quot;&gt;Add at ‘index’&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Stop at an index one before the desired&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//old current.next is assigned to the new node which in turn is assigned to current.next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;add-in-the-end&quot;&gt;Add in the end&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Go till the last node&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//this constructor has .next as null&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;linked-list-iteration&quot;&gt;Linked List Iteration&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;// Traditional Iteration for LinkedList
LinkedList runner = head;
	while(runner != head){
	   System.out.println(runner.data);
	   runner = runner.next;
	}
	
// The for loop
	for (LinkedList runner = head;  runner != null; runner = runner.next{
	   System.out.println(runner.data);
	}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/4e97df8926c80696a67ba8ae8ca87b08.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;set-all-nodes-to-42&quot;&gt;Set all nodes to 42&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;/* Change all nodes to 42 */
ListNode runner = list;

//Change values as itrarte
while (runner != null){
    runner.data = 42;
    runner = runner.next;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/9aef8598074b343be5e85c4946c9c2b7.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;set-last-node-to-42&quot;&gt;Set Last node to 42&lt;/h5&gt;

&lt;noscript&gt;&lt;pre&gt;/* Add nodes with 42 in the end */
public void addNodeEnd{
    ListNode runner = list;
    while(runner.next != null){
        runner = runner.next;
    }
    runner.next = new ListNode(42, null);
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/3a068e9a976ed17e8dd48fb0926cce5e.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;set-a-given-node-to-42&quot;&gt;Set a given node to 42&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;public void set(int index, int value){
    ListNode runner = front;

    while(index != 0){
        runner = runner.next;
        index--;
    }
    runner.data = value;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/0adc9cbca58a575ad8cdc7519c3fd0a1.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;find-the-maxmin-in-a-linked-list&quot;&gt;Find the max/min in a Linked List&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;public int min(){
    if (front == null)
        throw new NoSuchElementException();
    
    int min = 2147483647;// Max int value
    ListNode runner = front;
    while (runner != null){
        if (runner.data &amp;lt; min){
            min = runner.data;
        }
        runner = runner.next;
    }
    return min;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/743c96f56cadd8ad502d313e871a56b6.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;find-the-last-index-of-a-given-number-in-a-linked-list&quot;&gt;Find the last index of a given number in a Linked List&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;public int lastIndexOf(int num){
    if (front == null)
        return -1;
    
    int index = 0;
    int lastIndex = -1;
    
    ListNode runner = front;
    while (runner != null){
        if (runner.data == num){
            lastIndex = index;
        }
        index++;
        runner = runner.next;
    }
    return lastIndex;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/e607f8b37d13eb2fbf4d9e6333f38869.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;count-duplicate&quot;&gt;Count Duplicate&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;public int countDuplicates(){
    if (front == null || front.next == null)
        return 0;
    
    int duplicateCount = 0;
    int temp = front.data;
    ListNode runner = front.next;
    
    while (runner != null){
        if (temp == runner.data){
            duplicateCount++;
        }
        temp = runner.data;
        runner = runner.next;
    }
    return duplicateCount;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/3376fda31d518cc1f1747bcd1135d0e7.js&quot;&gt; &lt;/script&gt;

&lt;h5 id=&quot;delete-from-the-end&quot;&gt;Delete from the end&lt;/h5&gt;
&lt;noscript&gt;&lt;pre&gt;public int deleteBack(){
  if (front == null)
      throw new NoSuchElementException();
  
  // Only one node is present
  if (front.next == null){
      int deletedData = front.data;
      front = null;
      return deletedData;
  }
  
  ListNode runner = front;
  // Reaching the second last element and staying there
  while(runner.next.next != null){
      runner = runner.next;
  }
    
  // Leaving the last node for GC
  int deletedData = runner.next.data;
  runner.next = null;
  return deletedData;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nitinkc/b0021888f69349f08614edc484f7d050.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll Blog and Free Hosting on GitHub!</title>
   <link href="http://localhost:4000/jekyll/update/2016/04/04/jekyll-blog-GitHub-hosting/"/>
   <updated>2016-04-04T14:31:00-04:00</updated>
   <id>http://localhost:4000/jekyll/update/2016/04/04/jekyll-blog-GitHub-hosting</id>
   <content type="html">&lt;p&gt;Making a personal website using GitHubs free Hosting for the Jekyll Sites&lt;/p&gt;

&lt;p&gt;Create a blog with naming convention of yyyy-mm-dd-name-of-the-blog.md and save it in _posts directory&lt;/p&gt;

&lt;p&gt;execute in the terminal&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;making-a-personal-website-using-githubs-free-hosting-for-the-jekyll-sites&quot;&gt;Making a personal website using GitHubs free Hosting for the Jekyll Sites&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Ruby (Pre requisites for Jekyll) : https://jekyllrb.com/docs/installation/&lt;/li&gt;
  &lt;li&gt;Jekyll - for static site and blogging&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;build-the-site&quot;&gt;Build the site&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install

bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Incase of any issue,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LDFLAGS=&quot;-L/usr/local/opt/libffi/lib&quot; &amp;amp;&amp;amp; \
export PKG_CONFIG_PATH=&quot;/usr/local/opt/libffi/lib/pkgconfig&quot; &amp;amp;&amp;amp; \
bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 

</feed>
